====
# 1-basic (req=com.spotify)
# simple playing
U: play bohemian rhapsody
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), id =~ ("bohemian rhapsody"))[1] => @com.spotify.play_song(song=id);

A: I played Bohemian Rhapsody( on Spotify)?( on (Coolest Computer|giovanni-xps15))? ?.
A: >> expecting = null

====
# 2-basic-search (req=com.spotify)
U: find me the song despacito
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), id =~ ("despacito")) => notify;

# FIXME need a template for song by {artist 1} and {artist 2}
A: I (see|have( found)?) Despacito( or Despacito - Remix|, Despacito - Live (and|or) Despacito - Remix). (All of them are|They're) (songs?|musics?) by (Luis Fonsi|Daddy Yankee) (that|which) (are|is) (puerto rican pop|latin pop|latin|tropical).
A: >> expecting = command

====
# 3-by-artist (req=com.spotify)
U: play songs by taylor swift
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), contains(artists, null^^com.spotify:artist("taylor swift"))) => @com.spotify.play_song(song=id);

# FIXME this answer is awful. We need templates for talking about multiple action results.
A: Your request was completed successfully\.?
A: >> expecting = null

====
# 4-by-artist-search (req=com.spotify)
U: find me songs by britney spears
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), contains(artists, null^^com.spotify:artist("britney spears"))) => notify;

A: I (see|have( found)?) Toxic, My Only Wish \(This Year\),? and Oops!\.\.\.I Did It Again\. (They're|They are|All of them are) songs? by Britney Spears (that|which) (is|are) (post-teen|dance) pop.
A: >> expecting = command

====
# 5-song-artist (req=com.spotify)
U: play destination calabria by alex gaudino
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), id =~ ("destination calabria") && contains(artists, null^^com.spotify:artist("alex gaudino")))[1] => @com.spotify.play_song(song=id);

A: I played Destination Calabria( - (Radio Edit|Club Mix))?( on Spotify)?( on (Coolest Computer|giovanni-xps15))? ?.
A: >> expecting = null

====
# 6-song-artist-search (req=com.spotify)
U: find me the box by roddy ricch
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), id =~ ("the box") && contains(artists, null^^com.spotify:artist("roddy ricch")))[1] => notify;

A: The Box is a song by Roddy Ricch (from|in) 12/5/2019. Would you like to play it on Spotify\?
A: >> expecting = command

====
# 7-from-album (req=com.spotify)
U: play songs from the album american teen
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), album == null^^com.spotify:album("american teen")) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 8-from-album-search (req=com.spotify)
U: what songs are in the album the wall
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), album == null^^com.spotify:album("the wall")) => notify;

A: I (see|have found) In the Flesh\?, The Thin Ice and Another Brick in the Wall, Pt\. 1\. They're songs by Pink Floyd in the album The Wall\.
A: >> expecting = command

====
# 9-from-album-artist (req=com.spotify)
U: play the album songs about jane by maroon 5
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), album == null^^com.spotify:album("songs about jane") && contains(artists, null^^com.spotify:artist("maroon 5"))) => @com.spotify.play_song(song=id);

A: Your request was completed successfully.
A: >> expecting = null

====
# 10-from-album-artist-search-2 (req=com.spotify)

U: what songs are in the album folklore by taylor swift
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), album == null^^com.spotify:album("folklore") && contains(artists, null^^com.spotify:artist("taylor swift"))) => notify;

A: I (see|have( found)?) the 1, cardigan and the last great American dynasty\. (All of them are|They're|They are) songs? by Taylor Swift in the album folklore\.
A: >> expecting = command

====
# 11-sort-popularity-artist (req=com.spotify)
U: play the most popular song by post malone
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => sort popularity desc of (@com.spotify.song(), contains(artists, null^^com.spotify:artist("post malone")))[1] => @com.spotify.play_song(song=id);

A: I played Circles( on Spotify)?( on (Coolest Computer|giovanni-xps15))? ?.
A: >> expecting = null

====
# 12-sort-popularity-artist-search (req=com.spotify)
U: what is justin bieber's most popular song
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => sort popularity desc of (@com.spotify.song(), contains(artists, null^^com.spotify:artist("justin bieber")))[1] => notify;

A: The most popular song is .*\. It is (a )?song by Justin Bieber (in( the album)? .* |from [0-9/]+)?\. Would you like to play it on Spotify\?
A: >> expecting = command

====
# 13-sort-release-date-artist (req=com.spotify)
U: play the newest song by john legend
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => sort release_date desc of (@com.spotify.song(), contains(artists, null^^com.spotify:artist("john legend")))[1] => @com.spotify.play_song(song=id);

A: I played (Bigger Love (- Remix)?|Minefields( - Hook N Sling Remix))( on Spotify)?( on (Coolest Computer|giovanni-xps15))? ?.
A: >> expecting = null

====
# 14-sort-release-date-artist-search (req=com.spotify)
U: what is the newest song by beyonce
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => sort release_date desc of (@com.spotify.song(), contains(artists, null^^com.spotify:artist("beyonce")))[1] => notify;

A: The most recent song is BIGGER\. (It's|It is)( a)? song by Beyonc. (from|in) 7/30/2020. Would you like to play it on Spotify\?
A: >> expecting = command

====
# 15-sort-energy (req=com.spotify)
# TODO this is not a supported scenario

# play me energetic songs
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => sort energy desc of (@com.spotify.song()) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 16-sort-danceability (req=com.spotify)
# TODO this is not a supported scenario

# play me songs that are good for dancing
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => sort danceability desc of (@com.spotify.song()) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 17-player-pause (req=com.spotify)

U: pause playback
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => @com.spotify.player_pause();

A: I paused playback( for you)?\.?
A: >> expecting = null

====
# 18-player-play (req=com.spotify)

U: resume playing
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => @com.spotify.player_play();

A: I continued playback\.?
A: >> expecting = null

====
# 19-player-next (req=com.spotify)

U: play the next song
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => @com.spotify.player_next();

A: I (skipped this song|played the next song)( for you)?\.?
A: >> expecting = null

====
# 20-player-previous (req=com.spotify)

U: play the previous song
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => @com.spotify.player_previous();

A: I played the previous song( for you)?\.?
A: >> expecting = null

====
# 21-player-shuffle (req=com.spotify)

U: start shuffling
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => @com.spotify.player_shuffle(shuffle=enum(on));

A: I turned shuffle on\.
A: >> expecting = null

====
# 22-player-repeat (req=com.spotify)

U: repeat this song
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => @com.spotify.player_repeat(repeat=enum(track));

A: I repeated this song( for you)?\.
A: >> expecting = null

====
# 23-by-featured-artist (req=com.spotify)

U: play senorita by camila cabello
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), id =~ ("senorita") && contains(artists, null^^com.spotify:artist("camila cabello")))[1] => @com.spotify.play_song(song=id);

A: I played Se.orita( on Spotify)?( on (Coolest Computer|giovanni-xps15))? ?.
A: >> expecting = null

====
# 24-by-genre (req=com.spotify)

U: play pop music
#U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
#U: now => (@com.spotify.song(), contains~(genres, "pop")) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 25-by-genre-search (req=com.spotify)

# FIXME
#U: find me r&b music
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => (@com.spotify.song(), contains~(genres, "r&b")) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 26-by-date (req=com.spotify)

# FIXME bad parse
#U: play music from the 2010's
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => (@com.spotify.song(), release_date >= makeDate(2010, 1, 1) && release_date <= makeDate(2010, 1, 1) + 1year) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 27-by-date-search (req=com.spotify)

# FIXME bad parse
#U: find me music from the 2000's
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => (@com.spotify.song(), release_date >= makeDate(2000, 1, 1) && release_date <= makeDate(2000, 1, 1) + 1year) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 28-by-genre-date (req=com.spotify)

# FIXME bad parse
#U: play hip hop music from the 80's
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => (@com.spotify.song(), contains~(genres, "hip hop") && release_date >= makeDate(1980, 1, 1) && release_date <= makeDate(1980, 1, 1) + 1year) => @com.spotify.play_song(song=id);

A: Your request was completed successfully\.?
A: >> expecting = null

====
# 29-by-genre-date-search (req=com.spotify)

# FIXME bad parse
#U: find me rock music from the 60's
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => (@com.spotify.song(), contains~(genres, "rock") && release_date >= makeDate(1960, 1, 1) && release_date <= makeDate(1960, 1, 1) + 1year) => notify;

A: I (see|have( found)?) Breaking Up Is Hard to Do and C’Mon Everybody. (All of them are|They are|They're) (song|(sound )?track)s? (which|that) (are|is) (adult standards|rockabilly|brill building pop)\.
A: >> expecting = command

====
# 30-song-failure (req=com.spotify)

# play totally fake song
U: \t $dialogue @org.thingpedia.dialogue.transaction.execute;
U: now => (@com.spotify.song(), id =~ ("totally fake song")) => @com.spotify.play_song(song=id);

A: Sorry, I cannot find any song like that\.
A: >> expecting = command
